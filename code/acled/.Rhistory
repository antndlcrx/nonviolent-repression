mutate(Survey = 'August') %>%
select(weight_poststratify, Survey)
combined_weights <- rbind(survey_march_selected, survey_feb_selected, survey_aug_selected)
ggplot(combined_weights, aes(x = weight_poststratify, fill = Survey)) +
geom_histogram(data = subset(combined_weights, Survey == 'February'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'August'), bins = 100, alpha = 0.5, color = "black") +
scale_fill_manual(values = c("March" = "lightblue", "February" = "blue", "August" = "red")) +
theme_minimal() +
labs(title = "Distribution of Weights by Survey",
x = "Weight",
y = "Frequency")
survey_march_selected <- survey_march %>%
mutate(Survey = 'March') %>%
select(weight_poststratify, Survey)
survey_feb_selected <- survey_feb %>%
mutate(Survey = 'February') %>%
select(weight_poststratify, Survey)
survey_aug_selected <- survey_aug %>%
mutate(Survey = 'August') %>%
select(weight_poststratify, Survey)
combined_weights <- rbind(survey_march_selected, survey_feb_selected, survey_aug_selected)
ggplot(combined_weights, aes(x = weight_poststratify, fill = Survey)) +
geom_histogram(data = subset(combined_weights, Survey == 'March'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'February'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'August'), bins = 100, alpha = 0.5, color = "black") +
scale_fill_manual(values = c("March" = "lightblue", "February" = "blue", "August" = "red")) +
theme_minimal() +
labs(title = "Distribution of Weights by Survey",
x = "Weight",
y = "Frequency")
plot_march <- ggplot(survey_march_selected, aes(x = weight_poststratify)) +
geom_histogram(bins = 100, fill = "lightblue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "March: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_feb <- ggplot(survey_feb_selected, aes(x = weight_poststratify)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "February: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_aug <- ggplot(survey_aug_selected, aes(x = weight_poststratify)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "August: Distribution of Weights",
x = "Weight",
y = "Frequency")
grid.arrange(plot_feb, plot_aug, plot_march, ncol = 3)
plot_march <- ggplot(survey_march_selected, aes(x = weight_poststratify)) +
geom_histogram(bins = 100, fill = "lightblue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "March: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_feb <- ggplot(survey_feb_selected, aes(x = weight_poststratify)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "February: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_aug <- ggplot(survey_aug_selected, aes(x = weight_poststratify)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "August: Distribution of Weights",
x = "Weight",
y = "Frequency")
grid.arrange(plot_march, plot_feb, plot_aug, ncol = 3)
survey_march_strata <- survey_march %>%
group_by(gender, age_group, university_education) %>%
summarise(count = n()) %>%
mutate(proportion = count / nrow(survey_march),
source = "March Survey")
pop_strata <- ru_population_frame %>%
ungroup() %>%
mutate(proportion = Freq/sum(Freq),
source = "Census 2020")
combined_strata <- combined_strata <- rbind(survey_march_strata,  pop_strata)
weights_march_strata_man <- left_join(survey_march_strata,
pop_strata,
c("gender", "age_group", "university_education")) %>%
rename(population_proportion = proportion.y,
sample_proportion = proportion.x)  %>%
# calculate weights as popul prop/sample prop
mutate(weight = population_proportion / sample_proportion)
survey_march <- survey_march %>%
left_join(weights_march_strata_man, by = c("age_group", "gender", "university_education")) %>%
rename(weight_manually_calculated = weight)
sum_man_march <- round(summary(weights_march_strata_man$weight), 2)
sum_man_march_mat <-  matrix(as.numeric(sum_man_march), nrow = 1,
dimnames = list(c("Value"),
names(sum_man_march)
)
)
kable(sum_man_march_mat,
caption = "March Survey Weights Summary",
align = 'c',
format = "markdown")
# calculate weights and print the df with weights
weights_feb_strata_man <- left_join(survey_feb_strata,
pop_strata,
c("gender", "age_group", "university_education")) %>%
rename(population_proportion = proportion.y,
sample_proportion = proportion.x)  %>%
# calculate weights as popul prop/sample prop
mutate(weight = population_proportion / sample_proportion)
sum_man_feb <- round(summary(weights_feb_strata_man$weight), 2)
sum_man_feb_mat <-  matrix(as.numeric(sum_man_feb), nrow = 1,
dimnames = list(c("Value"),
names(sum_man_feb)
)
)
kable(sum_man_feb_mat,
caption = "February Survey Weights Summary",
align = 'c',
format = "markdown")
# calculate weights and print the df with weights
weights_aug_strata_man <- left_join(survey_aug_strata,
pop_strata,
c("gender", "age_group", "university_education")) %>%
rename(population_proportion = proportion.y,
sample_proportion = proportion.x)  %>%
# calculate weights as popul prop/sample prop
mutate(weight = population_proportion / sample_proportion)
sum_man_aug <- round(summary(weights_aug_strata_man$weight), 2)
sum_man_aug_mat <-  matrix(as.numeric(sum_man_aug), nrow = 1,
dimnames = list(c("Value"),
names(sum_man_aug)
)
)
kable(sum_man_aug_mat,
caption = "August Survey Weights Summary",
align = 'c',
format = "markdown")
weights_march_strata_man <- weights_march_strata_man %>%
mutate(Survey = 'March') %>%
select(weight, Survey, age_group, gender, university_education)
weights_feb_strata_man <- weights_feb_strata_man %>%
mutate(Survey = 'February') %>%
select(weight, Survey, age_group, gender, university_education)
weights_aug_strata_man <- weights_aug_strata_man %>%
mutate(Survey = 'August') %>%
select(weight, Survey,  age_group, gender, university_education)
combined_weights <- rbind(weights_march_strata_man, weights_feb_strata_man, weights_aug_strata_man)
ggplot(combined_weights, aes(x = weight, fill = Survey)) +
geom_histogram(data = subset(combined_weights, Survey == 'February'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'August'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'March'), bins = 100, alpha = 0.5, color = "black") +
scale_fill_manual(values = c("February" = "blue", "August" = "red", "March" = "lightblue")) +
theme_minimal() +
labs(title = "Distribution of Weights by Survey",
x = "Weight",
y = "Frequency")
plot_feb <- ggplot(weights_feb_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "February: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_aug <- ggplot(weights_aug_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "August: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_march <- ggplot(weights_march_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "lightblue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "March: Distribution of Weights",
x = "Weight",
y = "Frequency")
grid.arrange(plot_march, plot_feb, plot_aug, ncol = 2)
plot_feb <- ggplot(weights_feb_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "February: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_aug <- ggplot(weights_aug_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "August: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_march <- ggplot(weights_march_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "lightblue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "March: Distribution of Weights",
x = "Weight",
y = "Frequency")
grid.arrange(plot_march, plot_feb, plot_aug, ncol = 3)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
##### Set Up #####
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven)
# categories for education
uni_education <- c("Высшее образование (магистратура)",
"Высшее образование (бакалавриат / специалитет)",
"Научная степень (кандидат, доктор наук)")
na_education <- c("Затрудняюсь ответить", "Отказ от ответа", "no_answer")
# load levada data
levada_omnibus <- read_sav("data/surveys/levada_omnibus") %>%
mutate(gender = fct_recode(as.factor(qS1),
"Man"= "1",
"Woman" = "2"),
#adjust age
age_group = case_when(
as.numeric(qS2) %in% c(18:24) ~ '18-24',
as.numeric(qS2) %in% c(25:34) ~ '25-34',
as.numeric(qS2) %in% c(35:44) ~ '35-44',
as.numeric(qS2) %in% c(45:54) ~ '45-54',
as.numeric(qS2) %in% c(55:64) ~ '55-64',
as.numeric(qS2) >= 65 ~ '65+',
TRUE ~ NA)
)
# load survey data
survey_march <- read_csv("data/surveys/survey_march_post_election.csv",
locale = locale(encoding = "UTF-8")) %>%
mutate(gender = fct_recode(Q4,
"Man"= "Мужской",
"Woman" = "Женский"),
#adjust age
age_group = case_when(
as.numeric(Q1) %in% c(18:24) ~ '18-24',
as.numeric(Q1) %in% c(25:34) ~ '25-34',
as.numeric(Q1) %in% c(35:44) ~ '35-44',
as.numeric(Q1) %in% c(45:54) ~ '45-54',
as.numeric(Q1) %in% c(55:64) ~ '55-64',
as.numeric(Q1) >= 65 ~ '65+',
TRUE ~ NA),
university_education = case_when(Q5 %in% uni_education ~ "BA+",
TRUE ~ "BA-")
)
survey_feb <- read_xlsx("data/surveys/survey_feb.xlsx")
# clean data
column_descriptions <- as.character(unlist(survey_feb[1, ]))
names(column_descriptions) <- names(survey_feb)
# example, call: column_descriptions["Q1"]
# remove first row
survey_feb <- survey_feb[-1,]
survey_feb <- survey_feb %>%
mutate(
gender = as.factor(Q4),
# adjust dates
StartDate = as.POSIXct((as.numeric(StartDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
EndDate = as.POSIXct((as.numeric(EndDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
RecordedDate = as.POSIXct((as.numeric(RecordedDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
# adjust education
# Q5 %in% na_education ~ "NA" (incude to count NAs)
university_education = case_when(Q5 %in% uni_education ~ "BA+",
TRUE ~ "BA-"),
gender = fct_recode(gender,
"Man"= "Мужской",
"Woman" = "Женский"),
#adjust age
age_group = case_when(
as.numeric(Q1) %in% c(18:24) ~ '18-24',
as.numeric(Q1) %in% c(25:34) ~ '25-34',
as.numeric(Q1) %in% c(35:44) ~ '35-44',
as.numeric(Q1) %in% c(45:54) ~ '45-54',
as.numeric(Q1) %in% c(55:64) ~ '55-64',
as.numeric(Q1) >= 65 ~ '65+',
TRUE ~ NA),
# pull list experiment into one variable
list_treatment = case_when(is.na(`Q14 - version 2`) ~ 0,
TRUE ~ 1),
list_count = coalesce(`Q14 - version 1`,
`Q14 - version 2`),
# pull framing experiment into one variable
frame_treatment = case_when(
`Q15 - Group 1` != 0 ~ "Group 1",
`Q15 - Group 2` != 0 ~ "Group 2",
`Q15 - Group 3` != 0 ~ "Group 3",
`Q15 - Group 4` != 0 ~ "Group 4",
`Q15 - Group 5` != 0 ~ "Group 5",
`Q15 - Group 6` != 0 ~ "Group 6",
`Q15 - Group 7` != 0 ~ "Group 7",
`Q15 - Group 8` != 0 ~ "Group 8",
TRUE ~ NA_character_
)
,
Q15 = coalesce(`Q15 - Group 1`, `Q15 - Group 2`, `Q15 - Group 3`, `Q15 - Group 4`,
`Q15 - Group 5`, `Q15 - Group 6`, `Q15 - Group 7`, `Q15 - Group 8`)
)
# load population frame minus rows containing information on underaged categories and redundant total categories
survey_aug <- read_csv("data/surveys/survey_aug.csv",
locale = locale(encoding = "UTF-8")) %>%
# adjust education
# education %in% na_education ~ "NA"
filter(gender != "no_answer") %>%
mutate(university_education = case_when(
education %in% uni_education ~ "BA+",
TRUE ~ "BA-"),
gender = fct_recode(gender,
"Man"= "Мужской",
"Woman" = "Женский")
)
# -c(1:3,16:18)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 и более')
)
map_age_category <- function(age) {
for (category in names(wider_age_categories)) {
if (age %in% wider_age_categories[[category]]) {
return(category)
}
}
return(NA)
}
ru_population_frame$wider_age <- sapply(ru_population_frame$Age, map_age_category)
collapsed_df <- ru_population_frame %>%
group_by(Gender, wider_age) %>%
summarise(
`BA+` = sum(`BA+`, na.rm = TRUE),
`BA-` = sum(`BA-`, na.rm = TRUE) + sum(`NA`, na.rm = TRUE)
)
# harmonise categories
ru_population_frame <- collapsed_df %>%
mutate(Gender = fct_recode(Gender,
"Man"= "Men",
"Woman" = "Women")
) %>%
pivot_longer(
cols = c("BA+", "BA-"),
names_to = "Education",
values_to = "Count"
)
# harmonise features
colnames(ru_population_frame) <- c("gender", "age_group", "university_education",
"Freq")
# load levada data
levada_omnibus <- read_sav("data/surveys/levada_omnibus") %>%
mutate(gender = fct_recode(as.factor(qS1),
"Man"= "1",
"Woman" = "2"),
#adjust age
age_group = case_when(
as.numeric(qS2) %in% c(18:24) ~ '18-24',
as.numeric(qS2) %in% c(25:34) ~ '25-34',
as.numeric(qS2) %in% c(35:44) ~ '35-44',
as.numeric(qS2) %in% c(45:54) ~ '45-54',
as.numeric(qS2) %in% c(55:64) ~ '55-64',
as.numeric(qS2) >= 65 ~ '65+',
TRUE ~ NA),
university_education = case_when(qS3 == 6 ~ "BA+",
TRUE ~ "BA-")
)
# helper funcitons
calculate_shares <- function(dataset, dataset_name) {
dataset %>%
pivot_longer(cols = c(age_group, gender, university_education), names_to = "Variable", values_to = "Values") %>%
group_by(Variable, Values) %>%
summarise(Share = n() / nrow(dataset), .groups = 'drop') %>%
mutate(Survey = dataset_name,
Share = round(Share, 2))
}
plot_feb <- ggplot(weights_feb_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(x = "Weight", y = "Frequency")
plot_aug <- ggplot(weights_aug_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(x = "Weight", y = "Frequency")
plot_march <- ggplot(weights_march_strata_man, aes(x = weight)) +
geom_histogram(bins = 100, fill = "lightblue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(x = "Weight", y = "Frequency")
grid.arrange(plot_feb, plot_aug, plot_march, ncol = 3, top = "Distribution of Weights Across Months")
View(plot_feb)
pacman::p_load(tidyverse, rio, ggplot2, lubridate)
acled <- import("data/acled_processed_data/acled_deberta_preds_05_02_2024.csv")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
results='asis')
pacman::p_load(rio, tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven, stargazer)
acled <- import("C:/Users/murrn/GitHub/nonviolent-repression/data/acled_processed_data/acled_deberta_preds_05_02_2024.csv")
## unique observations
length(unique(acled$notes))
# Finding duplicate observations in 'variable'
duplicates <- duplicated(acled$notes)
# Getting the row IDs of these duplicates
row_ids <- which(duplicates)
# Print events
acled$notes[row_ids]
acled_clean <- acled[!duplicated(acled$notes), ]
length(unique(acled$notes))
# Finding duplicate observations in 'variable'
duplicates <- duplicated(acled$notes)
# Getting the row IDs of these duplicates
row_ids <- which(duplicates)
# Print events
acled$notes[row_ids]
acled_clean <- acled[!duplicated(acled$notes), ]
acled_clean <- acled_clean %>%
mutate(
date = ymd(as.character(event_date)),
month_year = as.Date(paste0(month_year, "-01"))
)
# Convert date column to Date object and create month-year object
acled_clean <- acled_clean %>%
mutate(date = ymd(event_date),
month_year = format(date, "%Y-%m"))
View(acled_clean)
unique(acled_clean$pred_labels)
alced_clean_dummy <- alced_clean %>%
mutate(pred_labels = factor(pred_labels)) %>%
mutate(dummy = 1) %>%
pivot_wider(names_from = pred_labels, values_from = dummy, values_fill = list(dummy = 0))
alced_clean_dummy <- alced_clean %>%
mutate(pred_labels = factor(pred_labels)) %>%
mutate(dummy = 1) %>%
pivot_wider(names_from = pred_labels, values_from = dummy, values_fill = list(dummy = 0))
acled_clean_dummy <- acled_clean %>%
mutate(pred_labels = factor(pred_labels)) %>%
mutate(dummy = 1) %>%
pivot_wider(names_from = pred_labels, values_from = dummy, values_fill = list(dummy = 0))
View(acled_clean_dummy)
acled_clean <- acled_clean %>%
mutate(date = ymd(event_date),
month_year = format(date, "%Y-%m"),
post_2022_02_24 = case_when(
date >= as.Date("2022-02-24") ~ 1,
TRUE ~ 0)
)
acled_clean_dummy <- acled_clean %>%
mutate(pred_labels = factor(pred_labels)) %>%
mutate(dummy = 1) %>%
pivot_wider(names_from = pred_labels, values_from = dummy, values_fill = list(dummy = 0))
date_counts <- acled_clean %>%
group_by(date, pred_labels) %>%
summarise(protest_count = n())
View(date_counts)
summarise(date_counts$protest_count)
summary(date_counts$protest_count)
# Convert date column to Date object and create month-year object
acled_clean <- acled_clean %>%
mutate(date = ymd(event_date),
month_year = format(date, "%Y-%m"),
post_invasion = case_when(
date >= as.Date("2022-02-24") ~ 1,
TRUE ~ 0)
)
acled_clean_dummy <- acled_clean %>%
mutate(pred_labels = factor(pred_labels)) %>%
mutate(dummy = 1) %>%
pivot_wider(names_from = pred_labels, values_from = dummy, values_fill = list(dummy = 0))
pol_base <- lm(political ~ post_invasion)
pol_base <- lm(political ~ post_invasion, acled_clean_dummy)
summary(pol_base)
pol_base <- glm(political ~ post_invasion, data = alced_clean_dummy, family = binomial)
# pol_base <- lm(political ~ post_invasion, acled_clean_dummy)
pol_base <- glm(political ~ post_invasion, data = acled_clean_dummy, family = binomial)
summary(pol_base)
pol_base <- lm(political ~ post_invasion, acled_clean_dummy)
summary(pol_base)
unique(acled_clean$pred_labels)
# Convert date column to Date object and create DVs
acled_clean <- acled_clean %>%
mutate(date = ymd(event_date),
pred_labels = recode(pred_labels,
"war (pro)" = "war_pro",
"war (anti)" = "war_anti"),
month_year = format(date, "%Y-%m"),
post_invasion = case_when(
date >= as.Date("2022-02-24") ~ 1,
TRUE ~ 0)
)
acled_clean_dummy <- acled_clean %>%
mutate(pred_labels = factor(pred_labels)) %>%
mutate(dummy = 1) %>%
pivot_wider(names_from = pred_labels, values_from = dummy, values_fill = list(dummy = 0))
acled_clean_dummy <- acled_clean_dummy %>%
mutate(non_pol = case_when(political == 1 ~ 0,
TRUE ~ 1))
acled_clean_dummy_no_war <- acled_clean_dummy %>%
mutate(non_pol = case_when(political == 1 ~ 0,
TRUE ~ 1)) %>%
filter(war_pro == 1 | war_anti == 1)
acled_clean_dummy_no_war <- acled_clean_dummy %>%
mutate(non_pol = case_when(political == 1 ~ 0,
TRUE ~ 1)) %>%
filter(war_pro == 0 | war_anti == 0)
acled_clean_dummy_no_war <- acled_clean_dummy %>%
mutate(non_pol = case_when(political == 1 ~ 0,
TRUE ~ 1)) %>%
filter(!(dummy_war_pro == 1 | dummy_war_anti == 1))
acled_clean_dummy_no_war <- acled_clean_dummy %>%
mutate(non_pol = case_when(political == 1 ~ 0,
TRUE ~ 1)) %>%
filter(!(war_pro == 1 | war_anti == 1))
View(acled_clean_dummy_no_war)
nonpol_base <- lm(non_pol ~ post_invasion, acled_clean_dummy)
summary(nonpol_base)
nonpol_base <- lm(non_pol ~ post_invasion, acled_clean_dummy_no_war)
summary(nonpol_base)
unique(acled_clean$assoc_actor_1)
