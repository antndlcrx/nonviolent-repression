geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "darkgrey") +
annotate(geom = "text", x = as.Date("2022-09-21"), y = 160, label = "Mobilisation", vjust = 1, hjust = 0, color = "black", angle = 90, size = 3)
# Create the plot
weekly_n_plot <- ggplot(unique_counts, aes(x = month, y = unique_notes)) +
geom_line(stat = "smooth", method = "loess", span = 0.05) +
#geom_point(size=0.3) +
scale_x_date(
date_minor_breaks = "1 month",
date_breaks = "1 year",
labels = function(x) format(x, "%Y")
) +
# Weekly Number of Unique Protests in Russia
# Number of Unique Protests
labs(title = "",
x = "",
y = "Protest Event Count") +
theme_classic()+
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(color = "black", fill = NA, size = 0.5) # Add border
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01", "2023-01-01")), linetype = "dashed", color = "blue") +  # Add blue vertical lines at the start of 2021, 2022, and 2023
# annotate(geom = "text", x = as.Date(c("2021-01-01", "2022-01-01", "2023-01-01")),
#          y = 160, label = c("2021", "2022", "2023"), vjust = 1, hjust = 0,
#          color = "blue", angle = 90, size = 3) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "darkgrey") +
annotate(geom = "text", x = as.Date("2022-02-24"), y = 160, label = "Invasion", vjust = 1, hjust = 0, color = "black", angle = 90, size = 3) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "darkgrey") +
annotate(geom = "text", x = as.Date("2022-09-21"), y = 160, label = "Mobilisation", vjust = 1, hjust = 0, color = "black", angle = 90, size = 3)
weekly_n_plot
# Create the plot
weekly_n_plot <- ggplot(unique_counts, aes(x = month, y = unique_notes)) +
geom_line(stat = "smooth", method = "loess", span = 0.1) +
#geom_point(size=0.3) +
scale_x_date(
date_minor_breaks = "1 month",
date_breaks = "1 year",
labels = function(x) format(x, "%Y")
) +
# Weekly Number of Unique Protests in Russia
# Number of Unique Protests
labs(title = "",
x = "",
y = "Protest Event Count") +
theme_classic()+
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(color = "black", fill = NA, size = 0.5) # Add border
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# geom_vline(xintercept = as.Date(c("2021-01-01", "2022-01-01", "2023-01-01")), linetype = "dashed", color = "blue") +  # Add blue vertical lines at the start of 2021, 2022, and 2023
# annotate(geom = "text", x = as.Date(c("2021-01-01", "2022-01-01", "2023-01-01")),
#          y = 160, label = c("2021", "2022", "2023"), vjust = 1, hjust = 0,
#          color = "blue", angle = 90, size = 3) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "darkgrey") +
annotate(geom = "text", x = as.Date("2022-02-24"), y = 160, label = "Invasion", vjust = 1, hjust = 0, color = "black", angle = 90, size = 3) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "darkgrey") +
annotate(geom = "text", x = as.Date("2022-09-21"), y = 160, label = "Mobilisation", vjust = 1, hjust = 0, color = "black", angle = 90, size = 3)
weekly_n_plot
# Create the plot
weekly_n_plot <- ggplot(unique_counts, aes(x = month, y = unique_notes)) +
geom_line(stat = "smooth", method = "loess", span = 0.1) +
# geom_point(size = 0.3) +
scale_x_date(
date_minor_breaks = "1 month",
date_breaks = "1 year",
labels = function(x) format(x, "%Y")
) +
scale_y_continuous(limits = c(0, NA)) + # Set y-axis to start at 0
labs(
title = "",
x = "",
y = "Protest Event Count"
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(color = "black", fill = NA, size = 0.5) # Add border
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "darkgrey") +
annotate(
geom = "text",
x = as.Date("2022-02-24"),
y = 160,
label = "Invasion",
vjust = 1,
hjust = 0,
color = "black",
angle = 90,
size = 3
) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "darkgrey") +
annotate(
geom = "text",
x = as.Date("2022-09-21"),
y = 160,
label = "Mobilisation",
vjust = 1,
hjust = 0,
color = "black",
angle = 90,
size = 3
)
weekly_n_plot
ggsave("outputs/monthly_unique_protests_plot.png", plot = weekly_n_plot, width = 10, height = 6, dpi = 300)
pacman::p_load(tidyverse, rio, ggplot2, lubridate)
library(readr)
data <- read_csv("C:/Users/murrn/GitHub/nonviolent-repression/data/acled_processed_data/acled_with_dvs_and_controls_16_07_2024_utf8byte.csv")
View(data)
library(readr)
data <- read_csv("C:/Users/murrn/GitHub/nonviolent-repression/data/acled_processed_data/acled_with_dvs_and_controls_09_07_2024.csv")
View(data)
# Identify duplicates
duplicates <- data %>%
group_by(event_id_cnty) %>%
filter(n() > 1)
if (nrow(duplicates) > 0) {
print("Duplicate rows found:")
print(duplicates)
} else {
print("No duplicate rows found.")
}
# Tabulate `pred_labels`
table(data$pred_labels)
# Generate dummy variables for `pred_labels`
data <- data %>%
mutate(across(pred_labels, ~ ifelse(. == 1, 1, 0), .names = "topic{.col}"))
View(data)
# Create `pol_expand`
data <- data %>%
mutate(pol_expand = ifelse(topic5 == 1 | topic7 == 1 | topic8 == 1, 1, 0))
# Generate dummy variables for `pred_labels`
data <- data %>%
mutate(across(c(pred_labels), ~ as.numeric(. == 1:8), .names = "topic{.col}"))
# Tabulate `pred_labels`
table(data$pred_labels)
# Generate dummy variables for `pred_labels`
data <- data %>%
mutate(across(c(pred_labels), ~ as.numeric(. == 1:8), .names = "topic{.col}"))
# Tabulate `pred_labels`
table(data$pred_labels)
# Tabulate `pred_labels`
table(data$pred_labels)
# create pol expand
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0))
# create pol expand
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0))
pred_labels %in% c("economic", "social" ~ 3))
)
# create pol expand
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = case_when(pol_expand == 1 ~ 0,
pred_labels %in% c("cultural", "legal") ~ 1,
pred_labels == "environmental" ~ 2,
pred_labels %in% c("economic", "social") ~ 3
)
)
# create pol expand
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = as.factor(case_when(pol_expand == 1 ~ 0,
pred_labels %in% c("cultural", "legal") ~ 1,
pred_labels == "environmental" ~ 2,
pred_labels %in% c("economic", "social") ~ 3
), ref=0)
)
# create pol expand
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = relevel(as.factor(case_when(pol_expand == 1 ~ 0,
pred_labels %in% c("cultural", "legal") ~ 1,
pred_labels == "environmental" ~ 2,
pred_labels %in% c("economic", "social") ~ 3
)),
ref=0)
)
# create pol expand
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal") ~ "1",
pred_labels == "environmental" ~ "2",
pred_labels %in% c("economic", "social") ~ "3"
)),
ref="0")
)
table(data$topics_recoded)
data <- data %>%
mutate(
auth_rec = case_when(
authorized == 0 ~ 0,
authorized %in% 1:2 ~ 1,
TRUE ~ NA_real_
),
unauth_rec = case_when(
unauthorized == 0 ~ 0,
unauthorized %in% 1:2 ~ 1,
TRUE ~ NA_real_
)
)
# Generate dummy variables for 'org_indicator'
data <- data %>%
mutate(across(org_indicator, ~ as.numeric(. == unique(org_indicator)), .names = "org_c{.col}"))
# Recode missing values in 'org_c1'
data$org_c1[is.na(data$org_c1)] <- 0
table(data$org_indicator)
sum(is.na(data$org_indicator))
data = data %>%
mutate(org_c1 = case_when(org_indicator=="other" ~ 1,
T ~ 0)
)
### do authorities remain more tolerant of non-polit vs polit ####
library(estimatr)
model1 <- lm_robust(police_violence ~ topics_rec * post_invasion + auth_rec + org_c1 +
factor(reg_code) + year + election_month, data = data)
model1 <- lm_robust(police_violence ~ topics_recoded * post_invasion + auth_rec + org_c1 +
factor(reg_code) + year + election_month, data = data)
summary(model)
summary(model1)
model1 <- lm_robust(police_violence ~ topics_recoded * post_invasion + auth_rec + org_c1 +
factor(reg_code) + factor(year) + election_month, data = data)
summary(model1)
pacman::p_load(tidyverse, rio, ggplot2, lubridate, stargazer)
stargazer(
model1,
type = "text",
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Regular expressions to match factors
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq")                 # Keep only desired statistics
)
stargazer(
model1,
type = "text",
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Regular expressions to match factors
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq")                 # Keep only desired statistics
)
pacman::p_load(tidyverse, rio, ggplot2,
sandwich, lmtest, lubridate, stargazer)
### do authorities remain more tolerant of non-polit vs polit ####
model <- lm(police_violence ~ topics_rec * post_invasion + auth_rec + org_c1 +
factor(reg_code) + year + election_month, data = data)
### do authorities remain more tolerant of non-polit vs polit ####
model <- lm(police_violence ~ topics_recoded * post_invasion + auth_rec + org_c1 +
factor(reg_code) + year + election_month, data = data)
# Calculate robust standard errors
robust_se <- vcovHC(model, type = "HC1")
# Extract coefficients and robust standard errors
robust_results <- coeftest(model, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
### do authorities remain more tolerant of non-polit vs polit ####
model <- lm(police_violence ~ topics_recoded * post_invasion + auth_rec + org_c1 +
factor(reg_code) + factor(year) + election_month, data = data)
# Calculate robust standard errors
robust_se <- vcovHC(model, type = "HC1")
# Extract coefficients and robust standard errors
robust_results <- coeftest(model, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
# Use stargazer to display the model with robust standard errors
stargazer(
model,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Omit factor variables
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence",
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
# Use stargazer to display the model with robust standard errors
stargazer(
model,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Omit factor variables
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
# create pol expand and topic relevel
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal") ~ "1",
pred_labels == "environmental" ~ "2",
pred_labels %in% c("economic", "social") ~ "3")),
ref="0")
topics_recoded2 = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
# create pol expand and topic relevel
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal") ~ "1",
pred_labels == "environmental" ~ "2",
pred_labels %in% c("economic", "social") ~ "3")),
ref="0"),
topics_recoded2 = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal") ~ "1",
pred_labels == "environmental" ~ "2",
pred_labels == "economic" ~ "3",
pred_labels == "social" ~ "4",
)),
ref="0"),
topics_recoded3 = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal", "environmental") ~ "1",
pred_labels  %in% c("economic", "social") ~ "2"
)),
ref="0"),
)
data = data %>%
mutate(missing_org = case_when(is.na(org_indicator) ~ 1,
T ~ 0))
model2 <- lm(missing_org ~ factor(year) + factor(reg_code) + factor(topics_recoded2), data = data)
stargazer(
model,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Omit factor variables
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq")                # Show sample size, R², adjusted R²
#dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
stargazer(
model2,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Omit factor variables
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq")                # Show sample size, R², adjusted R²
#dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
data <- data %>%
mutate(
time_indicator = case_when(
# Group 0: Dates up to February 23, 2022
date %in% as.Date(c("2022-02-14", "2022-02-15", "2022-02-16", "2022-02-17",
"2022-02-18", "2022-02-19", "2022-02-20", "2022-02-21",
"2022-02-22", "2022-02-23")) ~ 0,
# Group 1: Dates from February 24 to March 3, 2022
date %in% as.Date(c("2022-02-24", "2022-02-25", "2022-02-26", "2022-02-27",
"2022-02-28", "2022-03-01", "2022-03-02", "2022-03-03")) ~ 1,
# Group 2: Dates from March 4 to March 20, 2022
date %in% as.Date(c("2022-03-04", "2022-03-05", "2022-03-06", "2022-03-07",
"2022-03-08", "2022-03-09", "2022-03-10", "2022-03-11",
"2022-03-12", "2022-03-13", "2022-03-14", "2022-03-15",
"2022-03-16", "2022-03-17", "2022-03-18", "2022-03-19",
"2022-03-20")) ~ 2,
# Default case (optional)
TRUE ~ NA_real_
)
)
filtered_data <- data %>% filter(pro_kremlin_indicator == 0)
model_psa1 <- lm(police_violence ~ pol_expand * factor(year) + auth_rec + org_c1 +
election_month + pro_kremlin + factor(reg_code), data = filtered_data)
model_psa1 <- lm(police_violence ~ pol_expand * factor(year) + auth_rec + org_c1 +
election_month + pro_kremlin_indicator + factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa1, type = "HC1")
model2 <- lm(missing_org ~ factor(year) + factor(reg_code) + factor(topics_recoded2), data = data)
stargazer(
model2,
type = "text",
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Omit factor variables
omit.labels = c("Region Code", "Year"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq")                # Show sample size, R², adjusted R²
#dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
View(model2)
model_psa1 <- lm(police_violence ~ pol_expand * factor(year) + auth_rec + org_c1 +
election_month + pro_kremlin_indicator + factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa1, type = "HC1")
# Extract coefficients and robust standard errors
robust_results <- coeftest(model_psa1, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa1,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)", "factor\\(year\\)"), # Omit factor variables
omit.labels = c("Region Code"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
stargazer(
model_psa1,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Region Code"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
## check if robust to alternative ##
model_psa2 <- lm(police_violence ~ pol_expand2 * factor(year) + auth_rec + org_c1 +
election_month + pro_kremlin_indicator + factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa2, type = "HC1")
# Extract coefficients and robust standard errors
robust_results <- coeftest(model_psa2, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa2,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Region Code"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
model_psa3 <- lm(police_violence ~ factor(time_indicator) + pol_expand + org_c1 +
factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa3, type = "HC1")
robust_results <- coeftest(model_psa3, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa3,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Region Code"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
model_psa4 <- lm(police_violence ~ factor(time_indicator) * pol_expand + org_c1 +
factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa4, type = "HC1")
robust_results <- coeftest(model_psa4, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa4,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Region Code"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
data$month_year
filtered_data <- filtered_data %>%
mutate(
month_year = as.Date(paste0(month_year, "-01")), # Convert to Date (add day)
mycnt = as.integer(difftime(month_year, as.Date("2018-01-01"), units = "months")) + 1
)
filtered_data <- filtered_data %>%
mutate(
# Convert `month_year` to a date object
month_year_date = as.Date(paste0(month_year, "-01"), format = "%Y-%m-%d"),
# Calculate `mycnt` as months since January 2018
mycnt = 12 * (year(month_year_date) - 2018) + month(month_year_date)
)
View(filtered_data)
length(unique(filtered_data$mycnt))
model_psa5 <- lm(police_violence ~ mycnt * pol_expand + org_c1 + factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa5, type = "HC1")
robust_results <- coeftest(model_psa5, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa5,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Region Code"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence"
#covariate.labels = c("Topics * Post-Invasion", "Auth Rec", "Org C1", "Election Month") # Rename predictors
)
