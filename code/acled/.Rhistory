sources_share <- acled_source %>%
group_by(month, source_origin) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(month) %>%
mutate(share = count / sum(count))
# Plot
source_share_plot <- ggplot(sources_share, aes(x = month, y = share, linetype = source_origin)) +
geom_line() +
geom_point() +
scale_x_date(
date_breaks = "1 month",                       # Tick every month
labels = function(x) format(x, "%b %y"),       # Format as 'Jan 21', 'Feb 21', etc.
expand = c(0, 0)
) +
scale_y_continuous(
limits = c(0, 1),                              # Set Y-axis range for proportions
breaks = seq(0, 1, by = 0.1),                  # Ticks every 0.1
labels = scales::percent_format(accuracy = 1)  # Display Y-axis as percentages
) +
scale_linetype_manual(
labels = c("International", "Domestic"),
values = c("International" = "dashed", "Domestic" = "solid")
) +
labs(
title = "Monthly Share of Reports by Source",
x = "",
y = "Share of Records",
linetype = "Source"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),  # Box around the plot
panel.background = element_blank(),            # Clean background
plot.background = element_blank()              # Clean outer background
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "red") +
annotate(
geom = "text", x = as.Date("2022-02-24"), y = 0.6, label = "Invasion",
vjust = -0.5, hjust = 0.5, color = "red", angle = 90, size = 3
) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "darkgreen") +
annotate(
geom = "text", x = as.Date("2022-09-21"), y = 0.6, label = "Mobilisation",
vjust = -0.5, hjust = 0.5, color = "darkgreen", angle = 90, size = 3
)
source_share_plot
source_share_plot <- ggplot(sources_share, aes(x = month, y = share, linetype = source_origin)) +
geom_line() +
geom_point() +
scale_x_date(
date_breaks = "1 month",                       # Tick every month
labels = function(x) format(x, "%b %y"),       # Format as 'Jan 21', 'Feb 21', etc.
expand = c(0, 0)
) +
scale_y_continuous(
limits = c(0, 1),                              # Set Y-axis range for proportions
breaks = seq(0, 1, by = 0.1),                  # Ticks every 0.1
labels = scales::percent_format(accuracy = 1)  # Display Y-axis as percentages
) +
scale_linetype_manual(
labels = c("International", "Domestic"),
values = c("International" = "dashed", "Domestic" = "solid")
) +
labs(
title = "Monthly Share of Reports by Source",
x = "",
y = "Share of Records",
linetype = "Source"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),  # Box around the plot
panel.background = element_blank(),            # Clean background
plot.background = element_blank()              # Clean outer background
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-02-24"), y = 0.6, label = "Invasion",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-09-21"), y = 0.6, label = "Mobilisation",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
)
source_share_plot
na_share_plot
na_share_plot <- ggplot(na_shares, aes(x = month, y = share_reported)) +
geom_line(linetype = "solid") +
geom_point() +
scale_x_date(
date_breaks = "1 month",                       # Tick every month
labels = function(x) format(x, "%b %y"),       # Format as 'Jan 21', 'Feb 21', etc.
expand = c(0, 0)
) +
scale_y_continuous(
limits = c(0, 100),                            # Manually set Y-axis range
breaks = seq(0, 100, by = 10)                  # Y-axis ticks every 10 units
) +
labs(title = "",
x = "",
y = "Shate of Protest Reports") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),  # Add a black box
panel.background = element_blank(),            # Keep background clean
plot.background = element_blank()              # Keep outer plot background clean
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "black") +
annotate(geom = "text", x = as.Date("2022-02-24"), y = 65, label = "Invasion",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "black") +
annotate(geom = "text", x = as.Date("2022-09-21"), y = 65, label = "Mobilisation",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3)
na_share_plot
ggsave("C:/Users/murrn/GitHub/nonviolent-repression/outputs/acled/share_crowd_sizes.png", plot = na_share_plot, width = 10, height = 6, dpi = 300)
# Plot
source_share_plot <- ggplot(sources_share, aes(x = month, y = share, linetype = source_origin)) +
geom_line() +
geom_point() +
scale_x_date(
date_breaks = "1 month",                       # Tick every month
labels = function(x) format(x, "%b %y"),       # Format as 'Jan 21', 'Feb 21', etc.
expand = c(0, 0)
) +
scale_y_continuous(
limits = c(0, 1),                              # Set Y-axis range for proportions
breaks = seq(0, 1, by = 0.1),                  # Ticks every 0.1
labels = scales::percent_format(accuracy = 1)  # Display Y-axis as percentages
) +
scale_linetype_manual(
labels = c("International", "Domestic"),
values = c("International" = "dashed", "Domestic" = "solid")
) +
labs(
title = "",
x = "",
y = "Share of Protest Records",
linetype = "Source"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),  # Box around the plot
panel.background = element_blank(),            # Clean background
plot.background = element_blank()              # Clean outer background
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-02-24"), y = 0.6, label = "Invasion",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-09-21"), y = 0.6, label = "Mobilisation",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
)
source_share_plot
ggsave("C:/Users/murrn/GitHub/nonviolent-repression/outputs/acled/share_info_sources.png", plot = source_share_plot, width = 10, height = 6, dpi = 300)
# t-test
acled_filtered <- acled_filtered %>%
mutate(crowd_size_missing = ifelse(is.na(crowd_size), 1, 0))
t_test_result <- t.test(crowd_size_missing ~ post_invasion, data = acled_filtered)
t_test_result
# t-test
acled_source <- acled_source %>%
t_test_result <- t.test(rely_on_domestic ~ post_invasion, data = acled_filtered)
# t-test
acled_source <- acled_source %>%
# t-test
acled_source <- acled_source %>%
mutate(rely_on_domestic = ifelse(source_origin=="Domestic", 1, 0))
# t-test
acled_source <- acled_source %>%
mutate(rely_on_domestic = ifelse(source_origin=="Domestic", 1, 0))
t_test_result <- t.test(rely_on_domestic ~ post_invasion, data = acled_filtered)
t_test_result <- t.test(rely_on_domestic ~ post_invasion, data = acled_source)
# plot
sources_share <- acled_source %>%
group_by(month, source_origin) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(month) %>%
mutate(share = count / sum(count))
t_test_result
t_test_result$statistic
t_test_result$estimate
t_test_result$null.value
View(source_share_plot)
View(sources_share)
source_share_plot <- ggplot(sources_share, aes(x = month, y = share, linetype = source_origin)) +
geom_line() +
geom_point() +
scale_x_date(
date_breaks = "1 month",                       # Tick every month
labels = function(x) format(x, "%b %y"),       # Format as 'Jan 21', 'Feb 21', etc.
expand = c(0, 0)
) +
scale_y_continuous(
limits = c(0, 1),                              # Set Y-axis range for proportions
breaks = seq(0, 1, by = 0.1),                  # Ticks every 0.1
labels = scales::percent_format(accuracy = 1)  # Display Y-axis as percentages
) +
scale_linetype_manual(
labels = c("International", "Domestic"),
) +
labs(
title = "",
x = "",
y = "Share of Protest Records",
linetype = "Source"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),  # Box around the plot
panel.background = element_blank(),            # Clean background
plot.background = element_blank()              # Clean outer background
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-02-24"), y = 0.6, label = "Invasion",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-09-21"), y = 0.6, label = "Mobilisation",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
)
source_share_plot
source_share_plot <- ggplot(sources_share, aes(x = month, y = share, linetype = source_origin)) +
geom_line() +
geom_point() +
scale_x_date(
date_breaks = "1 month",                       # Tick every month
labels = function(x) format(x, "%b %y"),       # Format as 'Jan 21', 'Feb 21', etc.
expand = c(0, 0)
) +
scale_y_continuous(
limits = c(0, 1),                              # Set Y-axis range for proportions
breaks = seq(0, 1, by = 0.1),                  # Ticks every 0.1
labels = scales::percent_format(accuracy = 1)  # Display Y-axis as percentages
) +
labs(
title = "",
x = "",
y = "Share of Protest Records",
linetype = "Source"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),  # Box around the plot
panel.background = element_blank(),            # Clean background
plot.background = element_blank()              # Clean outer background
) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-02-24"), y = 0.6, label = "Invasion",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
) +
geom_vline(xintercept = as.Date("2022-09-21"), linetype = "solid", color = "black") +
annotate(
geom = "text", x = as.Date("2022-09-21"), y = 0.6, label = "Mobilisation",
vjust = -0.5, hjust = 0.5, color = "black", angle = 90, size = 3
)
source_share_plot
source_share_plot
ggsave("C:/Users/murrn/GitHub/nonviolent-repression/outputs/acled/share_info_sources.png", plot = source_share_plot, width = 10, height = 6, dpi = 300)
pacman::p_load(tidyverse, rio, ggplot2,
sandwich, lmtest, lubridate, margins, stargazer,
sjPlot, interplot, ggeffects)
data <- read_csv("C:/Users/murrn/GitHub/nonviolent-repression/data/acled_processed_data/acled_with_dvs_and_controls_16_07_2024_utf8byte.csv")
# Identify duplicates
duplicates <- data %>%
group_by(event_id_cnty) %>%
filter(n() > 1)
if (nrow(duplicates) > 0) {
print("Duplicate rows found:")
print(duplicates)
} else {
print("No duplicate rows found.")
}
# Tabulate `pred_labels
# Tabulate `pred_labels`
table(data$pred_labels)
# create pol expand and topic relevel
data = data %>%
mutate(pol_expand = case_when(pred_labels %in% c("political", "war_anti", "war_pro") ~ 1,
T ~ 0),
pol_expand2 = case_when(pred_labels %in% c("political", "war_anti") ~ 1,
T ~ 0)) %>%
mutate(topics_recoded = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal") ~ "1",
pred_labels == "environmental" ~ "2",
pred_labels %in% c("economic", "social") ~ "3")),
ref="0"),
topics_recoded2 = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal") ~ "1",
pred_labels == "environmental" ~ "2",
pred_labels == "economic" ~ "3",
pred_labels == "social" ~ "4",
)),
ref="0"),
topics_recoded3 = relevel(as.factor(case_when(pol_expand == 1 ~ "0",
pred_labels %in% c("cultural", "legal", "environmental") ~ "1",
pred_labels  %in% c("economic", "social") ~ "2"
)),
ref="0"),
)
table(data$topics_recoded)
data <- data %>%
mutate(
auth_rec = case_when(
authorized == 0 ~ 0,
authorized %in% 1:2 ~ 1,
TRUE ~ NA_real_
),
unauth_rec = case_when(
unauthorized == 0 ~ 0,
unauthorized %in% 1:2 ~ 1,
TRUE ~ NA_real_
)
)
table(data$org_indicator)
sum(is.na(data$org_indicator))
data = data %>%
mutate(org_c1 = case_when(org_indicator=="other" ~ 1,
T ~ 0)
)
### do authorities remain more tolerant of non-polit vs polit ####
model <- lm(police_violence ~ topics_recoded * post_invasion + auth_rec + org_c1 +
factor(reg_code) + factor(year) + election_month, data = data)
# Calculate robust standard errors
robust_se <- vcovHC(model, type = "HC1")
#### Analysis for PSA ####
data <- data %>%
mutate(
time_indicator = case_when(
# Group 0: Dates up to February 23, 2022
date %in% as.Date(c("2022-02-14", "2022-02-15", "2022-02-16", "2022-02-17",
"2022-02-18", "2022-02-19", "2022-02-20", "2022-02-21",
"2022-02-22", "2022-02-23")) ~ 0,
# Group 1: Dates from February 24 to March 3, 2022
date %in% as.Date(c("2022-02-24", "2022-02-25", "2022-02-26", "2022-02-27",
"2022-02-28", "2022-03-01", "2022-03-02", "2022-03-03")) ~ 1,
# Group 2: Dates from March 4 to March 20, 2022
date %in% as.Date(c("2022-03-04", "2022-03-05", "2022-03-06", "2022-03-07",
"2022-03-08", "2022-03-09", "2022-03-10", "2022-03-11",
"2022-03-12", "2022-03-13", "2022-03-14", "2022-03-15",
"2022-03-16", "2022-03-17", "2022-03-18", "2022-03-19",
"2022-03-20")) ~ 2,
# Default case (optional)
TRUE ~ NA_real_
)
)
filtered_data <- data %>% filter(pro_kremlin_indicator == 0)
model_psa1 <- lm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa1, type = "HC1")
# Extract coefficients and robust standard errors
robust_results <- coeftest(model_psa1, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa1,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "rsq", "adj.rsq"),                # Show sample size, R², adjusted R²
dep.var.labels = "Police Violence",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
## logit for robustness ##
model_psa1_logit <- glm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code),
data = filtered_data,
family = binomial(link = "logit"))
## logit for robustness ##
model_psa1_logit <- glm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code),
data = filtered_data,
family = binomial(link = "logit"))
# Calculate robust standard errors
robust_se <- vcovHC(model_psa1_logit, type = "HC1")  # Robust covariance matrix
robust_results <- coeftest(model_psa1_logit, vcov = robust_se)  # Coefficients with robust SE
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
stargazer(
model_psa1_logit,
type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "aic", "ll"),                   # For logistic models, show sample size, AIC, log-likelihood
dep.var.labels = "Police Violence (Logit)",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
stargazer(
model_psa1_logit,
#type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "aic", "ll"),                   # For logistic models, show sample size, AIC, log-likelihood
dep.var.labels = "Police Violence (Logit)",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
stargazer(model_psa1,
model_psa1_logit,
#type = "text",
se = list(robust_se_values), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "aic", "ll"),                   # For logistic models, show sample size, AIC, log-likelihood
dep.var.labels = "Police Violence (Logit)",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
model_psa1 <- lm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code), data = filtered_data)
# Calculate robust standard errors
robust_se <- vcovHC(model_psa1, type = "HC1")
# Extract coefficients and robust standard errors
robust_results <- coeftest(model_psa1, vcov = robust_se)
robust_coef <- robust_results[, 1]  # Coefficients
robust_se_values <- robust_results[, 2]  # Robust standard errors
## logit for robustness ##
model_psa1_logit <- glm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code),
data = filtered_data,
family = binomial(link = "logit"))
# Calculate robust standard errors
robust_se_logit <- vcovHC(model_psa1_logit, type = "HC1")  # Robust covariance matrix
robust_results_logits <- coeftest(model_psa1_logit, vcov = robust_se_logit)  # Coefficients with robust SE
robust_coef_logits <- robust_results_logits[, 1]  # Coefficients
robust_se_values_logits <- robust_results_logits[, 2]  # Robust standard errors
stargazer(model_psa1,
model_psa1_logit,
#type = "text",
se = list(robust_se_values, robust_se_values_logits), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "aic", "ll"),                   # For logistic models, show sample size, AIC, log-likelihood
dep.var.labels = "Police Violence (Logit)",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
unique(filtered_data$region)
unique(filtered_data$region_name_ru)
data_no_moscow <- filtered_data %>% filter(region_name_ru != "Москва ")
## same model but no Moscow
model_psa1_no_moscow <- lm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code), data = data_no_moscow)
# Calculate robust standard errors
robust_se_no_moscow <- vcovHC(model_psa1_no_moscow, type = "HC1")
# Extract coefficients and robust standard errors
robust_results_no_moscow <- coeftest(model_psa1_no_moscow, vcov = robust_se_no_moscow)
robust_coef_no_moscow <- robust_results_no_moscow[, 1]  # Coefficients
robust_se_values_no_moscow <- robust_results_no_moscow[, 2]  # Robust standard errors
stargazer(model_psa1,
model_psa1_logit,
model_psa1_no_moscow,
#type = "text",
se = list(robust_se_values, robust_se_values_logits, robust_se_values_no_moscow), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "aic", "ll"),                   # For logistic models, show sample size, AIC, log-likelihood
dep.var.labels = "Police Violence (Logit)",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
View(filtered_data)
unique(filtered_data$federal_subject)
data_no_moscow <- filtered_data %>% filter(federal_subject != "The City of Moscow")
## same model but no Moscow
model_psa1_no_moscow <- lm(police_violence ~ factor(pol_expand) * factor(year) + auth_rec + org_c1 +
election_month + factor(reg_code), data = data_no_moscow)
# Calculate robust standard errors
robust_se_no_moscow <- vcovHC(model_psa1_no_moscow, type = "HC1")
# Extract coefficients and robust standard errors
robust_results_no_moscow <- coeftest(model_psa1_no_moscow, vcov = robust_se_no_moscow)
robust_coef_no_moscow <- robust_results_no_moscow[, 1]  # Coefficients
robust_se_values_no_moscow <- robust_results_no_moscow[, 2]  # Robust standard errors
stargazer(model_psa1,
model_psa1_logit,
model_psa1_no_moscow,
#type = "text",
se = list(robust_se_values, robust_se_values_logits, robust_se_values_no_moscow), # Replace standard errors with robust SEs
omit = c("factor\\(reg_code\\)"), # Omit factor variables
omit.labels = c("Federal Region FE"),              # Optional: Custom labels for omitted variables
keep.stat = c("n", "aic", "ll"),                   # For logistic models, show sample size, AIC, log-likelihood
dep.var.labels = "Police Violence (Logit)",
covariate.labels = c("Political Protest", "Year 2019", "Year 2020", "Year 2021","Year 2022","Year 2023",
"Protest authorised", "Organisers", "Election Month", "Political x 2019",
"Political x 2020", "Political x 2021", "Political x 2022", "Political x 2023")
)
length(unique(filtered_data$reg_code))
length(unique(filtered_data$federal_subject))
