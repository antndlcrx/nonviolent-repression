education %in% uni_education ~ "BA+",
TRUE ~ "BA-")
)
# [-c(1:3,16:18), -c(3,7)]
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")
# Define wider age categories
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 – 74', '75 – 79', '80 – 84', '85+')
)
# Function to collapse age categories
collapse_age_categories <- function(df, age_mapping) {
df %>%
mutate(Age = factor(Age, levels = unlist(age_mapping))) %>%
rowwise() %>%
mutate(Age = list(names(age_mapping)[sapply(age_mapping, \(x) Age %in% x)])) %>%
group_by(Gender, Age) %>%
summarize(across(c(`BA+`, `BA-`, `NA`, `Total`, `Total_no_na`), sum, na.rm = TRUE), .groups = 'drop')
}
# Apply the function
collapsed_df <- collapse_age_categories(ru_population_frame, wider_age_categories)
# harmonise categories
ru_population_frame <- collapsed_df %>%
mutate(Gender = fct_recode(Gender,
"Мужской"= "Men",
"Женский" = "Women")
) %>%
pivot_longer(
cols = c("BA+", "BA-", "NA"),
names_to = "Education",
values_to = "Count"
)
# harmonise features
colnames(ru_population_frame) <- c("gender", "age_group", "university_education",
"Freq")
View(survey_aug)
View(ru_population_frame)
knitr::opts_chunk$set(echo = TRUE)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
##### Set Up #####
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr)
# load survey data
survey_feb <- read_xlsx("data/surveys/survey_feb.xlsx")
# clean data
column_descriptions <- as.character(unlist(survey_feb[1, ]))
names(column_descriptions) <- names(survey_feb)
# example, call: column_descriptions["Q1"]
# remove first row
survey_feb <- survey_feb[-1,]
# categories for education
uni_education <- c("Высшее образование (магистратура)",
"Высшее образование (бакалавриат / специалитет)",
"Научная степень (кандидат, доктор наук)")
na_education <- c("Затрудняюсь ответить", "Отказ от ответа", "no_answer")
survey_feb <- survey_feb %>%
mutate(
gender = as.factor(Q4),
# adjust dates
StartDate = as.POSIXct((as.numeric(StartDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
EndDate = as.POSIXct((as.numeric(EndDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
RecordedDate = as.POSIXct((as.numeric(RecordedDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
# adjust education
# Q5 %in% na_education ~ "NA" (incude to count NAs)
university_education = case_when(Q5 %in% uni_education ~ "BA+",
TRUE ~ "BA-"),
#adjust age
age_group = case_when(
as.numeric(Q1) %in% c(18:24) ~ '18-24',
as.numeric(Q1) %in% c(25:34) ~ '25-34',
as.numeric(Q1) %in% c(35:44) ~ '35-44',
as.numeric(Q1) %in% c(45:54) ~ '45-54',
as.numeric(Q1) %in% c(55:64) ~ '55-64',
as.numeric(Q1) >= 65 ~ '65+',
TRUE ~ NA),
# pull list experiment into one variable
list_treatment = case_when(is.na(`Q14 - version 2`) ~ 0,
TRUE ~ 1),
list_count = coalesce(`Q14 - version 1`,
`Q14 - version 2`),
# pull framing experiment into one variable
frame_treatment = case_when(
`Q15 - Group 1` != 0 ~ "Group 1",
`Q15 - Group 2` != 0 ~ "Group 2",
`Q15 - Group 3` != 0 ~ "Group 3",
`Q15 - Group 4` != 0 ~ "Group 4",
`Q15 - Group 5` != 0 ~ "Group 5",
`Q15 - Group 6` != 0 ~ "Group 6",
`Q15 - Group 7` != 0 ~ "Group 7",
`Q15 - Group 8` != 0 ~ "Group 8",
TRUE ~ NA_character_
)
,
Q15 = coalesce(`Q15 - Group 1`, `Q15 - Group 2`, `Q15 - Group 3`, `Q15 - Group 4`,
`Q15 - Group 5`, `Q15 - Group 6`, `Q15 - Group 7`, `Q15 - Group 8`)
)
# load population frame minus rows containing information on underaged categories and redundant total categories
survey_aug <- read_csv("data/surveys/survey_aug.csv",
locale = locale(encoding = "UTF-8")) %>%
# adjust education
# education %in% na_education ~ "NA"
filter(gender != "no_answer") %>%
mutate(university_education = case_when(
education %in% uni_education ~ "BA+",
TRUE ~ "BA-")
)
# -c(1:3,16:18)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
# Define wider age categories
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 – 74', '75 – 79', '80 – 84', '85+')
)
# Function to collapse age categories
collapse_age_categories <- function(df, age_mapping) {
df %>%
mutate(Age = factor(Age, levels = unlist(age_mapping))) %>%
rowwise() %>%
mutate(Age = list(names(age_mapping)[sapply(age_mapping, \(x) Age %in% x)])) %>%
group_by(Gender, Age) %>%
summarize(across(c(`BA+`, `BA-`, `NA`), sum, na.rm = TRUE), .groups = 'drop')
}
# Apply the function
collapsed_df <- collapse_age_categories(ru_population_frame, wider_age_categories)
# harmonise categories
ru_population_frame <- collapsed_df %>%
mutate(Gender = fct_recode(Gender,
"Мужской"= "Men",
"Женский" = "Women")
) %>%
pivot_longer(
cols = c("BA+", "BA-", "NA"),
names_to = "Education",
values_to = "Count"
)
# harmonise features
colnames(ru_population_frame) <- c("gender", "age_group", "university_education",
"Freq")
View(collapsed_df)
# -c(1:3,16:18)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
# Define wider age categories
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 – 74', '75 – 79', '80 – 84', '85+')
)
# Function to collapse age categories
collapse_age_categories <- function(df, age_mapping) {
df %>%
mutate(Age = factor(Age, levels = unlist(age_mapping))) %>%
rowwise() %>%
mutate(Age = list(names(age_mapping)[sapply(age_mapping, \(x) Age %in% x)])) %>%
group_by(Gender, Age) %>%
summarize(across(c(`BA+`, `BA-`, `NA`), sum, na.rm = TRUE), .groups = 'drop')
}
# Apply the function
collapsed_df <- collapse_age_categories(ru_population_frame, wider_age_categories)
View(ru_population_frame)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
# Define wider age categories
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 – 74', '75 – 79', '80 – 84', '85+')
)
# Function to map each age range to its new category
map_age_category <- function(age) {
for (category in names(wider_age_categories)) {
if (age %in% wider_age_categories[[category]]) {
return(category)
}
}
return(NA)
}
# Add a new column for the wider age category
ru_population_frame$WiderAge <- sapply(ru_population_frame$Age, map_age_category)
# Group by Gender and the new WiderAge category, then summarise
collapsed_df <- ru_population_frame %>%
group_by(Gender, WiderAge) %>%
summarise(
Total = sum(Total, na.rm = TRUE),
`BA+` = sum(`BA+`, na.rm = TRUE),
`BA-` = sum(`BA-`, na.rm = TRUE),
`NA` = sum(`NA`, na.rm = TRUE)
)
# Group by Gender and the new WiderAge category, then summarise
collapsed_df <- ru_population_frame %>%
group_by(Gender, WiderAge) %>%
summarise(
Total = sum(`Total`, na.rm = TRUE),
`BA+` = sum(`BA+`, na.rm = TRUE),
`BA-` = sum(`BA-`, na.rm = TRUE),
`NA` = sum(`NA`, na.rm = TRUE)
)
# Group by Gender and the new WiderAge category, then summarise
collapsed_df <- ru_population_frame %>%
group_by(Gender, WiderAge) %>%
summarise(
`BA+` = sum(`BA+`, na.rm = TRUE),
`BA-` = sum(`BA-`, na.rm = TRUE),
`NA` = sum(`NA`, na.rm = TRUE)
)
View(collapsed_df)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
# Define wider age categories
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 – 74', '75 – 79', '80 – 84', '85+')
)
# Function to map each age range to its new category
map_age_category <- function(age) {
for (category in names(wider_age_categories)) {
if (age %in% wider_age_categories[[category]]) {
return(category)
}
}
return(NA)
}
# Add a new column for the wider age category
ru_population_frame$WiderAge <- sapply(ru_population_frame$Age, map_age_category)
View(ru_population_frame)
View(ru_population_frame)
knitr::opts_chunk$set(echo = TRUE)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
##### Set Up #####
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr)
# load survey data
survey_feb <- read_xlsx("data/surveys/survey_feb.xlsx")
# clean data
column_descriptions <- as.character(unlist(survey_feb[1, ]))
names(column_descriptions) <- names(survey_feb)
# example, call: column_descriptions["Q1"]
# remove first row
survey_feb <- survey_feb[-1,]
# categories for education
uni_education <- c("Высшее образование (магистратура)",
"Высшее образование (бакалавриат / специалитет)",
"Научная степень (кандидат, доктор наук)")
na_education <- c("Затрудняюсь ответить", "Отказ от ответа", "no_answer")
survey_feb <- survey_feb %>%
mutate(
gender = as.factor(Q4),
# adjust dates
StartDate = as.POSIXct((as.numeric(StartDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
EndDate = as.POSIXct((as.numeric(EndDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
RecordedDate = as.POSIXct((as.numeric(RecordedDate) - 25569) * 86400, origin = "1970-01-01", tz = "UTC"),
# adjust education
# Q5 %in% na_education ~ "NA" (incude to count NAs)
university_education = case_when(Q5 %in% uni_education ~ "BA+",
TRUE ~ "BA-"),
#adjust age
age_group = case_when(
as.numeric(Q1) %in% c(18:24) ~ '18-24',
as.numeric(Q1) %in% c(25:34) ~ '25-34',
as.numeric(Q1) %in% c(35:44) ~ '35-44',
as.numeric(Q1) %in% c(45:54) ~ '45-54',
as.numeric(Q1) %in% c(55:64) ~ '55-64',
as.numeric(Q1) >= 65 ~ '65+',
TRUE ~ NA),
# pull list experiment into one variable
list_treatment = case_when(is.na(`Q14 - version 2`) ~ 0,
TRUE ~ 1),
list_count = coalesce(`Q14 - version 1`,
`Q14 - version 2`),
# pull framing experiment into one variable
frame_treatment = case_when(
`Q15 - Group 1` != 0 ~ "Group 1",
`Q15 - Group 2` != 0 ~ "Group 2",
`Q15 - Group 3` != 0 ~ "Group 3",
`Q15 - Group 4` != 0 ~ "Group 4",
`Q15 - Group 5` != 0 ~ "Group 5",
`Q15 - Group 6` != 0 ~ "Group 6",
`Q15 - Group 7` != 0 ~ "Group 7",
`Q15 - Group 8` != 0 ~ "Group 8",
TRUE ~ NA_character_
)
,
Q15 = coalesce(`Q15 - Group 1`, `Q15 - Group 2`, `Q15 - Group 3`, `Q15 - Group 4`,
`Q15 - Group 5`, `Q15 - Group 6`, `Q15 - Group 7`, `Q15 - Group 8`)
)
# load population frame minus rows containing information on underaged categories and redundant total categories
survey_aug <- read_csv("data/surveys/survey_aug.csv",
locale = locale(encoding = "UTF-8")) %>%
# adjust education
# education %in% na_education ~ "NA"
filter(gender != "no_answer") %>%
mutate(university_education = case_when(
education %in% uni_education ~ "BA+",
TRUE ~ "BA-")
)
# -c(1:3,16:18)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
# Define wider age categories
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 и более')
)
# Function to map each age range to its new category
map_age_category <- function(age) {
for (category in names(wider_age_categories)) {
if (age %in% wider_age_categories[[category]]) {
return(category)
}
}
return(NA)
}
# Add a new column for the wider age category
ru_population_frame$WiderAge <- sapply(ru_population_frame$Age, map_age_category)
# Group by Gender and the new WiderAge category, then summarise
collapsed_df <- ru_population_frame %>%
group_by(Gender, WiderAge) %>%
summarise(
`BA+` = sum(`BA+`, na.rm = TRUE),
`BA-` = sum(`BA-`, na.rm = TRUE),
`NA` = sum(`NA`, na.rm = TRUE)
)
# harmonise categories
ru_population_frame <- collapsed_df %>%
mutate(Gender = fct_recode(Gender,
"Мужской"= "Men",
"Женский" = "Women")
) %>%
pivot_longer(
cols = c("BA+", "BA-", "NA"),
names_to = "Education",
values_to = "Count"
)
# harmonise features
colnames(ru_population_frame) <- c("gender", "age_group", "university_education",
"Freq")
View(ru_population_frame)
head(ru_population_frame, 5)
survey_feb_strata <- survey_feb %>%
group_by(gender, age_group, university_education) %>%
summarise(count = n()) %>%
mutate(proportion = count / nrow(survey_feb),
source = "survey_feb")
survey_aug_strata <- survey_aug %>%
group_by(gender, age_group, university_education) %>%
summarise(count = n()) %>%
mutate(proportion = count / nrow(survey_feb),
source = "survey_aug")
pop_strata <- ru_population_frame %>%
mutate(proportion = Freq/sum(Freq),
source = "population")
# combine dfs for plotting
# combined_strata <- rbind(survey_strata, pop_strata)
combined_strata <- combined_strata <- rbind(survey_feb_strata, survey_aug_strata, pop_strata) %>%
mutate(comparison_group = case_when(
source == "population" ~ "Population",
source == "survey_feb" ~ "Survey Feb",
source == "survey_aug" ~ "Survey Aug",
TRUE ~ as.character(source)  # Fallback in case there are other sources
))
# Plotting
# ggplot(combined_strata, aes(x = university_education, y = proportion, color = source)) +
#   geom_point(aes(shape = source), size = 3) +  # Use shape to differentiate sources
#   geom_line(aes(group = interaction(university_education, source), linetype = source)) +  # Use linetype to differentiate lines
#   facet_grid(gender ~ age_group) +  # Facets based on gender and age_group
#   labs(
#     x = "University Education",
#     y = "Proportion",
#     color = "Source",
#     shape = "Source",  # Legend for shapes
#     linetype = "Source"  # Legend for linetypes
#   ) +
#   theme(legend.position = "bottom") +
#   theme_bw()
# plot differences
ggplot(combined_strata, aes(x = university_education,
y = proportion,
color = source)) +
geom_point(aes(shape = source), size = 3) +
geom_line(aes(group = interaction(age_group, university_education))) +
facet_grid(gender ~ age_group) +
labs(x = "University Education", y = "Proportion", shape = "Source") +
theme(legend.position = "bottom") +
theme_bw()
## survey library ##
unweighted_data <- svydesign(ids = ~1, data = survey_feb)
weighted <- postStratify(unweighted_data, ~age_group + gender + university_education,
ru_population_frame, partial=TRUE)
# save weights
survey_feb$weight <- weights(weighted)
sum_feb <- summary(weights(weighted))
sum_feb
## survey library ##
unweighted_data <- svydesign(ids = ~1, data = survey_aug)
weighted <- postStratify(unweighted_data, ~age_group + gender + university_education,
ru_population_frame, partial=TRUE)
# save weights
survey_aug$weight <- weights(weighted)
sum_aug <- summary(weights(weighted))
sum_aug
top_five_rows_feb <- survey_feb %>%
arrange(desc(weight)) %>%
select(age_group, gender, university_education, weight) %>%
head(5)
kable(top_five_rows_feb, caption = "February Survey, Top Five Rows by Weight", align = 'c')
View(top_five_rows_feb)
top_five_rows_aug <- survey_aug %>%
arrange(desc(weight)) %>%
select(age_group, gender, university_education, weight)%>%
head(5)
kable(top_five_rows_aug, caption = "August Survey, Top Five Rows by Weight", align = 'c')
survey_feb_selected <- survey_feb %>%
mutate(Survey = 'February') %>%
select(weight, Survey)
survey_aug_selected <- survey_aug %>%
mutate(Survey = 'August') %>%
select(weight, Survey)
combined_weights <- rbind(survey_feb_selected, survey_aug_selected)
ggplot(combined_weights, aes(x = weight, fill = Survey)) +
geom_histogram(data = subset(combined_weights, Survey == 'February'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'August'), bins = 100, alpha = 0.5, color = "black") +
scale_fill_manual(values = c("February" = "blue", "August" = "red")) +
theme_minimal() +
labs(title = "Distribution of Weights by Survey",
x = "Weight",
y = "Frequency")
plot_feb <- ggplot(survey_feb_selected, aes(x = weight)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "February Survey: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_aug <- ggplot(survey_aug_selected, aes(x = weight)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "August Survey: Distribution of Weights",
x = "Weight",
y = "Frequency")
grid.arrange(plot_feb, plot_aug, ncol = 2)
# calculate weights and print the df with weights
weights_aug_strata <- left_join(survey_aug_strata,
pop_strata,
c("gender", "age_group", "university_education")) %>%
rename(population_proportion = proportion.y,
sample_proportion = proportion.x)  %>%
# calculate weights as popul prop/sample prop
mutate(weight = population_proportion / sample_proportion)
sum_man_aug <-summary(weights_aug_strata$weight)
sum_man_aug
# calculate weights and print the df with weights
weights_feb_strata <- left_join(survey_feb_strata,
pop_strata,
c("gender", "age_group", "university_education")) %>%
rename(population_proportion = proportion.y,
sample_proportion = proportion.x)  %>%
# calculate weights as popul prop/sample prop
mutate(weight = population_proportion / sample_proportion)
# head(weights_feb_strata)
sum_man_feb <- summary(weights_feb_strata$weight)
sum_man_feb
weights_feb_strata <- weights_feb_strata %>%
mutate(Survey = 'February') %>%
select(weight, Survey)
weights_aug_strata <- weights_aug_strata %>%
mutate(Survey = 'August') %>%
select(weight, Survey)
combined_weights <- rbind(weights_feb_strata, weights_aug_strata)
ggplot(combined_weights, aes(x = weight, fill = Survey)) +
geom_histogram(data = subset(combined_weights, Survey == 'February'), bins = 100, alpha = 0.5, color = "black") +
geom_histogram(data = subset(combined_weights, Survey == 'August'), bins = 100, alpha = 0.5, color = "black") +
scale_fill_manual(values = c("February" = "blue", "August" = "red")) +
theme_minimal() +
labs(title = "Distribution of Weights by Survey",
x = "Weight",
y = "Frequency")
plot_feb <- ggplot(weights_feb_strata, aes(x = weight)) +
geom_histogram(bins = 100, fill = "blue", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "February: Distribution of Weights",
x = "Weight",
y = "Frequency")
plot_aug <- ggplot(weights_aug_strata, aes(x = weight)) +
geom_histogram(bins = 100, fill = "red", color = "black", alpha = 0.5) +
theme_minimal() +
labs(title = "August: Distribution of Weights",
x = "Weight",
y = "Frequency")
grid.arrange(plot_feb, plot_aug, ncol = 2)
