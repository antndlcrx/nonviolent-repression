#   # select(c(notes, date, protest_type, proportion,
#   #          pro_kremlin_indicator, event_id_cnty)) %>%
#   filter(date >= as.Date("2021-07-01") & date <= as.Date("2022-12-31"))
#
# # Save as CSV
# write.csv(acled_subset, "data/processed_data/acled_preprocessed_jul21_dec22.csv", row.names = FALSE)
# Save as Excel
# write.xlsx(acled_subset, "acled_preprocessed_jul21_dec22.xlsx", rowNames = FALSE)
#### 1. Time-series line plot of the monthly number of unique protests in Russia ####
# Count unique observations of 'notes' for each month
unique_counts <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>% # remove pro-krml
group_by(month_year) %>%
summarise(unique_notes = n_distinct(notes))%>% # counting unique events (notes)
mutate(month_year = ym(month_year))
monthly_n_plot <- ggplot(unique_counts, aes(x = month_year, y = unique_notes)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Number of Unique Protests in Russia",
x = "",
y = "Number of Unique Protests") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red")
monthly_n_plot
ggsave("outputs/daily_unique_protests_plot.png", plot = monthly_n_plot, width = 10, height = 6, dpi = 300)
#### 2. subsetting political and non-political protests; ####
unique_counts_polit <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>%
mutate(polit_indicator = case_when(
pred_labels == "political" ~ "political",
TRUE ~ "other"),
month_year = as.Date(paste0(month_year, "-01"))) %>%
group_by(month_year, polit_indicator) %>%
summarise(unique_notes = n_distinct(notes))
# Plotting
political_protests_plot <- ggplot(unique_counts_polit, aes(x = month_year, y = unique_notes, linetype = polit_indicator)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Number of Unique Protests in Russia",
x = "",
y = "Number of Unique Protests",
linetype = "") +  # Set legend title to no title
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red") +
scale_linetype_manual(values = c("political" = "solid", "other" = "dotdash"))
ggsave("outputs/political_protests_plot.png", plot = political_protests_plot, width = 10, height = 6, dpi = 300)
#### 2.5 Protests by Type ####
unique_counts_by_type <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>%
mutate(
month_year = as.Date(paste0(month_year, "-01"))) %>%
group_by(month_year, pred_labels) %>%
summarise(unique_notes = n_distinct(notes))
# Plotting
protests_by_type_plot <- ggplot(unique_counts_by_type, aes(x = month_year, y = unique_notes, color = pred_labels)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Number of Unique Protests in Russia by Protest Type",
x = "",
y = "Number of Unique Protests",
linetype = "",
color = "Protest Type") +  # Set legend title to no title
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red")
# scale_linetype_manual(values = c("political" = "solid", "other" = "dotdash"))
ggsave("outputs/protests_by_type_plot.png", plot = protests_by_type_plot, width = 10, height = 6, dpi = 300)
#### 3. Time-series line plot of the monthly share of unauthorised ####
# Prepare the data
unique_counts_share <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>%
mutate(authorized_status = case_when(
authorized >= 1 & unauthorized == 0 ~ "authorized" ,
unauthorized >= 1 & authorized == 0 ~ "unauthorized",
TRUE ~ "na"
),
month_year = as.Date(paste0(month_year, "-01"))) %>%
group_by(month_year, authorized_status) %>%
summarise(count = n_distinct(notes)) %>%
spread(authorized_status, count, fill = 0) %>% # Spread data for calculation
mutate(share_unauthorized = unauthorized / (unauthorized + authorized + na)) %>%
select(month_year, share_unauthorized) # Select only necessary columns
# Plot the data
unauthorised_protests_plot <- ggplot(unique_counts_share, aes(x = month_year, y = share_unauthorized)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Share of Unauthorized Protests in Russia",
x = "",
y = "Share of Unauthorized Protests") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red")
ggsave("outputs/unauthorised_protests_plot.png", plot = unauthorised_protests_plot, width = 10, height = 6, dpi = 300)
#### 4 share of unauthorized political and unauthorized non-political ####
# Prepare the data
unique_counts_share <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>%
mutate(polit_indicator = case_when(pred_labels == "political" ~ "political",
TRUE ~ "other"),
authorized_status = case_when(
authorized == 1 ~ "authorized",
unauthorized ==1 & authorized == 0 ~ "unauthorized",
TRUE ~ "na"
),
month_year = as.Date(paste0(month_year, "-01"))) %>%
group_by(month_year, polit_indicator, authorized_status) %>%
summarise(count = n_distinct(notes)) %>%
spread(authorized_status, count, fill = 0) %>% # Spread data for calculation
mutate(share_unauthorized = unauthorized / (unauthorized + authorized + na)) %>%
select(month_year, share_unauthorized) # Select only necessary columns
# Plot the data
unauthorised_political_protests_plot <- ggplot(unique_counts_share, aes(x = month_year, y = share_unauthorized, color = polit_indicator)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Share of Unauthorized Protests in Russia by Protest Type",
x = "",
y = "Share of Unauthorized Protests",
color = "Protest Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red")
ggsave("outputs/unauthorised_political_protests_plot.png", plot = unauthorised_political_protests_plot, width = 10, height = 6, dpi = 300)
#### 5.1 Share of protests by type facing Arrests ####
# Prepare the data
unique_counts_arrests_share <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>%
mutate(polit_indicator = case_when(pred_labels == "political" ~ "political",
TRUE ~ "other"),
arrests = ifelse(sub_event_type %in% c("Protest with intervention",
"Excessive force against protesters"),
"arrests", "no_arrests"),
authorized_status = case_when(
authorized == 1 ~ "authorized",
unauthorized ==1 & authorized == 0 ~ "unauthorized",
TRUE ~ NA
),
month_year = as.Date(paste0(month_year, "-01"))) %>%
group_by(month_year, arrests) %>%
summarise(count = n_distinct(notes)) %>%
spread(arrests, count, fill = 0) %>% # Spread data for calculation
mutate(share_arrests = arrests / (arrests + no_arrests)) %>%
select(month_year, share_arrests) # Select only necessary columns
# Plot the data
arrests_protests_plot <- ggplot(unique_counts_arrests_share, aes(x = month_year, y = share_arrests)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Share of Protests with Arrests in Russia",
x = "",
y = "",
color = "Protest Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red")
ggsave("outputs/share_arrests_plot.png", plot = arrests_protests_plot, width = 10, height = 6, dpi = 300)
#### 5.2. Share of protests by type facing Arrests ####
# Prepare the data
unique_counts_arrests_share <- acled_clean %>%
filter(pro_kremlin_indicator != 1) %>%
mutate(polit_indicator = case_when(pred_labels == "political" ~ "political",
TRUE ~ "other"),
arrests = ifelse(sub_event_type %in% c("Protest with intervention",
"Excessive force against protesters"),
"arrests", "no_arrests"),
authorized_status = case_when(
authorized == 1 ~ "authorized",
unauthorized ==1 & authorized == 0 ~ "unauthorized",
TRUE ~ NA
),
month_year = as.Date(paste0(month_year, "-01"))) %>%
group_by(month_year, polit_indicator, arrests) %>%
summarise(count = n_distinct(notes)) %>%
spread(arrests, count, fill = 0) %>% # Spread data for calculation
mutate(share_arrests = arrests / (arrests + no_arrests)) %>%
select(month_year, share_arrests) # Select only necessary columns
# Plot the data
arrests_type_protests_plot <- ggplot(unique_counts_arrests_share, aes(x = month_year, y = share_arrests, color = polit_indicator)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", minor_breaks = "1 month") +
labs(title = "Monthly Share of Protests with Arrests in Russia by Protest Type",
x = "",
y = "",
color = "Protest Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.Date("2022-02-24"), linetype = "dashed", color = "red")
ggsave("outputs/share_arrests_by_type_plot.png", plot = arrests_type_protests_plot, width = 10, height = 6, dpi = 300)
#### checking events #####
# Filter data for the last three months
# end_date <- Sys.Date()
# start_date <- end_date %m-% months(6)
end_date <- as.Date("2020-06-01")
start_date <- as.Date("2020-03-01")
filtered_df <- acled %>%
filter(unauthorized != 0) %>%
mutate(month_year = as.Date(paste0(year(date), "-", month(date), "-01"))) %>%
filter(month_year >= start_date & month_year <= end_date)
?lm
qualtrics <- read.csv("/data/surveys/survey_march_weights.csv", header=T, na.strings=c("", " ", "NA"))
qualtrics <- read.csv("data/surveys/survey_march_weights.csv", header=T, na.strings=c("", " ", "NA"))
library(readr)
qualtrics <- read_csv("data/surveys/survey_march_weights.csv")
View(qualtrics)
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
# qualtrics <- read.csv("data/surveys/survey_march_weights.csv", header=T, na.strings=c("", " ", "NA"))
qualtrics <- read_csv("data/surveys/survey_march_weights.csv")
View(qualtrics)
locale = locale(encoding = "UTF-8")
View(qualtrics)
qualtrics <- read_csv("data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
View(qualtrics)
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
# categories for education
uni_education <- c("Высшее образование (магистратура)",
"Высшее образование (бакалавриат / специалитет)",
"Научная степень (кандидат, доктор наук)")
# load survey data
survey_march <- read_csv("data/surveys/survey_march_post_election.csv",
locale = locale(encoding = "UTF-8"))
View(survey_march)
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
# qualtrics <- read.csv("data/surveys/survey_march_weights.csv", header=T, na.strings=c("", " ", "NA"))
qualtrics <- read_csv("data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
View(qualtrics)
##### Set Up #####
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
# categories for education
uni_education <- c("Высшее образование (магистратура)",
"Высшее образование (бакалавриат / специалитет)",
"Научная степень (кандидат, доктор наук)")
# load survey data
survey_march <- read_csv("data/surveys/survey_march_post_election.csv",
locale = locale(encoding = "UTF-8")) %>%
mutate(gender = fct_recode(Q4,
"Man"= "Мужской",
"Woman" = "Женский"),
#adjust age
age_group = case_when(
as.numeric(Q1) %in% c(18:24) ~ '18-24',
as.numeric(Q1) %in% c(25:34) ~ '25-34',
as.numeric(Q1) %in% c(35:44) ~ '35-44',
as.numeric(Q1) %in% c(45:54) ~ '45-54',
as.numeric(Q1) %in% c(55:64) ~ '55-64',
as.numeric(Q1) >= 65 ~ '65+',
TRUE ~ NA),
university_education = case_when(Q5 %in% uni_education ~ "BA+",
TRUE ~ "BA-")
)
ru_population_frame <- read_csv("data/surveys/ru_population_frame.csv")[-c(1:3,16:18), -c(3,7)]
wider_age_categories <- list(
'18-24' = c('18 – 19', '20 – 24'),
'25-34' = c('25 – 29', '30 – 34'),
'35-44' = c('35 – 39', '40 – 44'),
'45-54' = c('45 – 49', '50 – 54'),
'55-64' = c('55 – 59', '60 – 64'),
'65+' = c('65 – 69', '70 и более')
)
map_age_category <- function(age) {
for (category in names(wider_age_categories)) {
if (age %in% wider_age_categories[[category]]) {
return(category)
}
}
return(NA)
}
ru_population_frame$wider_age <- sapply(ru_population_frame$Age, map_age_category)
collapsed_df <- ru_population_frame %>%
group_by(Gender, wider_age) %>%
summarise(
`BA+` = sum(`BA+`, na.rm = TRUE),
`BA-` = sum(`BA-`, na.rm = TRUE) + sum(`NA`, na.rm = TRUE)
)
# harmonise categories
ru_population_frame <- collapsed_df %>%
mutate(Gender = fct_recode(Gender,
"Man"= "Men",
"Woman" = "Women")
) %>%
pivot_longer(
cols = c("BA+", "BA-"),
names_to = "Education",
values_to = "Count"
)
# harmonise features
colnames(ru_population_frame) <- c("gender", "age_group", "university_education",
"Freq")
#### weights survey library ####
unweighted_data <- svydesign(ids = ~1, data = survey_march)
weighted <- postStratify(unweighted_data, ~age_group + gender + university_education,
ru_population_frame, partial=TRUE)
# save weights
survey_march$weight_poststratify <- weights(weighted)
### sanity check
# sum_march <- round(summary(weights(weighted)), 2)
#
# sum_march_mat <-  matrix(as.numeric(sum_march), nrow = 1,
#                        dimnames = list(c("Value"),
#                                        names(sum_march)
#                        )
# )
#
# top_five_rows_march <- survey_march %>%
#   distinct(weight_poststratify, .keep_all = TRUE) %>%
#   arrange(desc(weight_poststratify)) %>%
#   select(age_group, gender, university_education, weight_poststratify) %>%
#   slice_head(n = 5)
#### weights manually ####
# calculate weights
survey_march_strata <- survey_march %>%
group_by(gender, age_group, university_education) %>%
summarise(count = n()) %>%
mutate(proportion = count / nrow(survey_march),
source = "March Survey")
pop_strata <- ru_population_frame %>%
ungroup() %>%
mutate(proportion = Freq/sum(Freq),
source = "Census 2020")
combined_strata <- combined_strata <- rbind(survey_march_strata,  pop_strata)
weights_march_strata_man <- left_join(survey_march_strata,
pop_strata,
c("gender", "age_group", "university_education")) %>%
rename(population_proportion = proportion.y,
sample_proportion = proportion.x)  %>%
# calculate weights as popul prop/sample prop
mutate(weight = population_proportion / sample_proportion)
### sanity check
# sum_man_march <- round(summary(weights_march_strata_man$weight), 2)
#
# sum_man_march_mat <-  matrix(as.numeric(sum_man_march), nrow = 1,
#                            dimnames = list(c("Value"),
#                                            names(sum_man_march)
#                            )
# )
survey_march <- survey_march %>%
left_join(weights_march_strata_man, by = c("age_group", "gender", "university_education")) %>%
rename(weight_manually_calculated = weight)
write_csv(survey_march, "data/surveys/survey_march_weights.csv", row.names = FALSE)
write_csv(survey_march, "data/surveys/survey_march_weights.csv")
qualtrics <- read_csv("data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
qualtrics <- read_csv("data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
View(qualtrics)
#Recode outcomes, higher values greater support, drop NA/Refuse to Answer
table(qualtrics$DV2)
qualtrics$outcome2 <- rep(NA, nrow(qualtrics))
qualtrics$outcome2[qualtrics$DV2=="Подавляющее большинство"] <- 5
qualtrics$outcome2[qualtrics$DV2=="Большинство"] <- 4
qualtrics$outcome2[qualtrics$DV2=="Многие, но не большинство"] <- 3
qualtrics$outcome2[qualtrics$DV2=="Незначительное меньшинство"] <- 2
qualtrics$outcome2[qualtrics$DV2=="Практически никто"] <- 1
qualtrics$outcome2[qualtrics$DV2=="Затрудняюсь ответить"] <- NA
qualtrics$outcome2[qualtrics$DV2=="Отказ от ответа"] <- NA
table(qualtrics$outcome2)
table(qualtrics$DV3)
qualtrics$outcome3 <- rep(NA, nrow(qualtrics))
qualtrics$outcome3[qualtrics$DV3=="Полностью контролирует элиты"] <- 4
qualtrics$outcome3[qualtrics$DV3=="Скорее контролирует элиты"] <- 3
qualtrics$outcome3[qualtrics$DV3=="Скорее не контролирует элиты"] <- 2
qualtrics$outcome3[qualtrics$DV3=="Вовсе не контролирует элиты"] <- 1
qualtrics$outcome3[qualtrics$DV3=="Затрудняюсь ответить"] <- NA
qualtrics$outcome3[qualtrics$DV3=="Отказ от ответа"] <- NA
table(qualtrics$outcome3)
qualtrics$out1<-qualtrics$DV1A
qualtrics$out1[is.na(qualtrics$out1)]<-qualtrics$DV1B[is.na(qualtrics$out1)]
qualtrics$out1[is.na(qualtrics$out1)]<-qualtrics$DV1C[is.na(qualtrics$out1)]
qualtrics$out1[is.na(qualtrics$out1)]<-qualtrics$DV1D[is.na(qualtrics$out1)]
table (qualtrics$out1)
qualtrics$outcome1 <- rep(NA, nrow(qualtrics))
qualtrics$outcome1[qualtrics$out1=="Полностью контролирует политическую ситуацию "] <- 4
qualtrics$outcome1[qualtrics$out1=="Скорее контролирует политическую ситуацию"] <- 3
qualtrics$outcome1[qualtrics$out1=="Скорее не контролирует политическую ситуацию"] <- 2
qualtrics$outcome1[qualtrics$out1=="Вовсе не контролирует политическую ситуацию"] <- 1
table(qualtrics$outcome1)
table(qualtrics$outcome1)
qualtrics$outcome1 <- rep(NA, nrow(qualtrics))
qualtrics$outcome1[qualtrics$out1=="Полностью контролирует политическую ситуацию "] <- 4
qualtrics$outcome1[qualtrics$out1=="Скорее контролирует политическую ситуацию"] <- 3
qualtrics$outcome1[qualtrics$out1=="Скорее не контролирует политическую ситуацию"] <- 2
qualtrics$outcome1[qualtrics$out1=="Вовсе не контролирует политическую ситуацию"] <- 1
table(qualtrics$outcome1)
table (qualtrics$out1)
View(qualtrics)
qualtrics$outcome1 <- rep(NA, nrow(qualtrics))
qualtrics$outcome1[qualtrics$out1=="Полностью контролирует политическую ситуацию"] <- 4
qualtrics$outcome1[qualtrics$out1=="Скорее контролирует политическую ситуацию"] <- 3
qualtrics$outcome1[qualtrics$out1=="Скорее не контролирует политическую ситуацию"] <- 2
qualtrics$outcome1[qualtrics$out1=="Вовсе не контролирует политическую ситуацию"] <- 1
table(qualtrics$outcome1)
#Create exp group indicators
qualtrics$t1<-0
qualtrics$t2<-0
qualtrics$t1[!is.na(qualtrics$DV1B) | !is.na(qualtrics$DV1D) ]<-1
qualtrics$t2[!is.na(qualtrics$DV1C) | !is.na(qualtrics$DV1D) ]<-1
qualtrics$elec.know<- qualtrics$Q6_1 > 82 & qualtrics$Q6_1 < 92
mean(qualtrics$elec.know,na.rm=T)
qualtrics$elec.know2<- qualtrics$Q6_1 > 77 & qualtrics$Q6_1 < 97
mean(qualtrics$elec.know2,na.rm=T)
qualtrics$comp <- NA
qualtrics$comp[qualtrics$Q7=="Да"] <- 1
qualtrics$comp[qualtrics$Q7=="Нет"] <- 0
mean(qualtrics$comp,na.rm=T)
q1<-lm(outcome1 ~ t1*t2,data=qualtrics, weights=weight_poststratify)
q1<-lm(outcome1 ~ t1*t2,data=qualtrics)
q2<-lm(outcome2 ~ t1*t2,data=qualtrics)
q3<-lm(outcome3 ~ t1*t2,data=qualtrics)
library(stargazer)
stargazer(l1,q1,l2,q2,l3,q3,digits=2)
e1<-lm(outcome1 ~ elec.know2*t1 + t2,data=qualtrics)
e2<-lm(outcome2 ~ elec.know2*t1 + t2,data=qualtrics)
e3<-lm(outcome3 ~ elec.know2*t1 + t2,data=qualtrics) ###This is cool
c1<-lm(outcome1 ~ t1 + comp*t2,data=qualtrics)###This is cool
c2<-lm(outcome2 ~ t1 + comp*t2,data=qualtrics)
c3<-lm(outcome3 ~ t1 + comp*t2,data=qualtrics)
stargazer(e1,c1,e2,c2,e3,c3,digits=2)
?stargazer
stargazer(e1,c1,e2,c2,e3,c3,digits=2, type='text')
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, readr, broom,
lubridate, gt, gtsummary, survey, readxl,
gridExtra, knitr, haven, stargazer)
Sys.getlocale()
# Set this to a locale that supports Cyrillic, for example, on Windows
Sys.setlocale("LC_ALL", "Russian")
# qualtrics <- read.csv("data/surveys/survey_march_weights.csv", header=T, na.strings=c("", " ", "NA"))
qualtrics <- read_csv("data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
#Recode outcomes, higher values greater support, drop NA/Refuse to Answer
table(qualtrics$DV2)
qualtrics$outcome2 <- rep(NA, nrow(qualtrics))
qualtrics$outcome2[qualtrics$DV2=="Подавляющее большинство"] <- 5
qualtrics$outcome2[qualtrics$DV2=="Большинство"] <- 4
qualtrics$outcome2[qualtrics$DV2=="Многие, но не большинство"] <- 3
qualtrics$outcome2[qualtrics$DV2=="Незначительное меньшинство"] <- 2
qualtrics$outcome2[qualtrics$DV2=="Практически никто"] <- 1
qualtrics$outcome2[qualtrics$DV2=="Затрудняюсь ответить"] <- NA
qualtrics$outcome2[qualtrics$DV2=="Отказ от ответа"] <- NA
table(qualtrics$outcome2)
table(qualtrics$DV3)
qualtrics$outcome3 <- rep(NA, nrow(qualtrics))
qualtrics$outcome3[qualtrics$DV3=="Полностью контролирует элиты"] <- 4
qualtrics$outcome3[qualtrics$DV3=="Скорее контролирует элиты"] <- 3
qualtrics$outcome3[qualtrics$DV3=="Скорее не контролирует элиты"] <- 2
qualtrics$outcome3[qualtrics$DV3=="Вовсе не контролирует элиты"] <- 1
qualtrics$outcome3[qualtrics$DV3=="Затрудняюсь ответить"] <- NA
qualtrics$outcome3[qualtrics$DV3=="Отказ от ответа"] <- NA
table(qualtrics$outcome3)
qualtrics$out1<-qualtrics$DV1A
qualtrics$out1[is.na(qualtrics$out1)]<-qualtrics$DV1B[is.na(qualtrics$out1)]
qualtrics$out1[is.na(qualtrics$out1)]<-qualtrics$DV1C[is.na(qualtrics$out1)]
qualtrics$out1[is.na(qualtrics$out1)]<-qualtrics$DV1D[is.na(qualtrics$out1)]
table (qualtrics$out1)
qualtrics$outcome1 <- rep(NA, nrow(qualtrics))
qualtrics$outcome1[qualtrics$out1=="Полностью контролирует политическую ситуацию"] <- 4
qualtrics$outcome1[qualtrics$out1=="Скорее контролирует политическую ситуацию"] <- 3
qualtrics$outcome1[qualtrics$out1=="Скорее не контролирует политическую ситуацию"] <- 2
qualtrics$outcome1[qualtrics$out1=="Вовсе не контролирует политическую ситуацию"] <- 1
table(qualtrics$outcome1)
#Create exp group indicators
qualtrics$t1<-0
qualtrics$t2<-0
qualtrics$t1[!is.na(qualtrics$DV1B) | !is.na(qualtrics$DV1D) ]<-1
qualtrics$t2[!is.na(qualtrics$DV1C) | !is.na(qualtrics$DV1D) ]<-1
qualtrics$elec.know<- qualtrics$Q6_1 > 82 & qualtrics$Q6_1 < 92
mean(qualtrics$elec.know,na.rm=T)
qualtrics$elec.know2<- qualtrics$Q6_1 > 77 & qualtrics$Q6_1 < 97
mean(qualtrics$elec.know2,na.rm=T)
qualtrics$comp <- NA
qualtrics$comp[qualtrics$Q7=="Да"] <- 1
qualtrics$comp[qualtrics$Q7=="Нет"] <- 0
mean(qualtrics$comp,na.rm=T)
q1<-lm(outcome1 ~ t1*t2,data=qualtrics)
q2<-lm(outcome2 ~ t1*t2,data=qualtrics)
q3<-lm(outcome3 ~ t1*t2,data=qualtrics)
q1wp<-lm(outcome1 ~ t1*t2,data=qualtrics, weights=weight_poststratify)
q2wp<-lm(outcome2 ~ t1*t2,data=qualtrics, weights=weight_poststratify)
q3wp<-lm(outcome3 ~ t1*t2,data=qualtrics, weights=weight_poststratify)
q1wm<-lm(outcome1 ~ t1*t2,data=qualtrics, weights=weight_manually_calculated)
q2wm<-lm(outcome2 ~ t1*t2,data=qualtrics, weights=weight_manually_calculated)
q3wm<-lm(outcome3 ~ t1*t2,data=qualtrics, weights=weight_manually_calculated)
stargazer(q1, q1wp, q1wm,
q2, q2wp, q2wm,
q3, q3wp, q3wm, digits=2)
qualtrics <- read_csv("data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
setwd("C:/Users/murrn/GitHub/nonviolent-repression")
qualtrics <- read_csv("nonviolent-repression/data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
qualtrics <- read_csv("C:/Users/murrn/GitHub/nonviolent-repression/data/surveys/survey_march_weights.csv", locale = locale(encoding = "UTF-8"))
